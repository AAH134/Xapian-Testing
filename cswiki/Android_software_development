
Android software development is the process by which new applications are created for the Android operating system. Applications are usually developed in the Java programming language using the Android Software Development Kit, but other development tools are available. As of April 2011 more than 200,000 applications have been developed for Android, with over 3 billion downloads.[tpl]cite web |title=Android App Stats|url=http://www.androlib.com/appstats.aspx|accessdate=31 December 2010| archiveurl= http://web.archive.org/web/20110102122636/http://www.androlib.com/appstats.aspx| archivedate= 2 January 2011 | deadurl= no[/tpl][tpl]cite web |url= http://techcrunch.com/2011/04/14/google-3-billion-android-apps-installed-up-50-percent-from-last-quarter/ |title=Google: 3 Billion Android Apps Installed; Downloads Up 50 Percent From Last Quarter |author=Leena Rao|work=Techcrunch|date=14 April 2011|accessdate=13 May 2011| archiveurl= http://web.archive.org/web/20110425062025/http://techcrunch.com/2011/04/14/google-3-billion-android-apps-installed-up-50-percent-from-last-quarter/| archivedate= 25 April 2011 | deadurl= no[/tpl]. The Android platform has also grown to become a favorite among mobile developers. A June 2011 research indicated that over 67% of mobile developers used the platform, at the time of publication. [tpl]cite web |url =http://www.visionmobile.com/blog/2011/06/developer-economics-2011-winners-and-losers-in-the-platform-race/ |title= Developer Economics 2011[/tpl]

==Software development tools==

===Android SDK===

The Android software development kit (SDK) includes a comprehensive set of development tools.[tpl]cite web |url = http://developer.android.com/guide/developing/tools/index.html |title = Tools Overview |work = Android Developers |date = 21 July 2009[/tpl] These include a debugger, libraries, a handset emulator based on QEMU, documentation, sample code, and tutorials. Currently supported development platforms include computers running Linux (any modern desktop Linux distribution), Mac OS X 10.4.9 or later, Windows XP or later. The officially supported integrated development environment (IDE) is Eclipse using the Android Development Tools (ADT) Plugin, though developers may use any text editor to edit Java and XML files then use command line tools (Java Development Kit and Apache Ant are required) to create, build and debug Android applications as well as control attached Android devices (e.g., triggering a reboot, installing software package(s) remotely).[tpl]cite web |url = http://jonwestfall.com/2009/08/backup-restore-android-apps-using-adb/ |title = Backup & Restore Android Apps Using ADB |first = Jon |last = Westfall |date = 25 August 2009 |work = JonWestfall.com |accessdate =2009-12-07[/tpl]
Enhancements to Android's SDK go hand in hand with the overall Android platform development. The SDK also supports older versions of the Android platform in case developers wish to target their applications at older devices. Development tools are downloadable components, so after one has downloaded the latest version and platform, older platforms and tools can also be downloaded for compatibility testing.[tpl]cite web |url=http://developer.android.com/sdk/tools-notes.html |title=SDK Tools[/tpl]
Android applications are packaged in .apk format  and stored under /data/app folder on the Android OS (the folder is accessible only to root user for security reasons). APK package contains .dex files[tpl]cite web |url=http://developer.android.com/guide/appendix/glossary.html |title=Android SDK Glossary[/tpl] (compiled byte code files called Dalvik executables), resource files, etc.

===Native development kit===

Libraries written in C and other languages can be compiled to ARM or x86 native code and installed using the Android Native Development Kit. Native classes can be called from Java code running under the Dalvik VM using the System.loadLibrary call, which is part of the standard Android Java classes.[tpl]cite web |url=http://davanum.wordpress.com/2007/12/09/android-invoke-jni-based-methods-bridging-cc-and-java/ |title=Android — Invoke JNI based methods (Bridging C/C++ and Java) |last=Srinivas |first=Davanum |date=2007-12-09 |accessdate=2008-12-13| archiveurl= http://web.archive.org/web/20081216084711/http://davanum.wordpress.com/2007/12/09/android-invoke-jni-based-methods-bridging-cc-and-java/| archivedate= 16 December 2008 | deadurl= no[/tpl][tpl]cite web |url=http://developer.android.com/reference/java/lang/System.html |title=java.lang.System |work=Android Developers |accessdate=2009-09-03[/tpl]
Complete applications can be compiled and installed using traditional development tools.[tpl]cite web |url=http://benno.id.au/blog/2007/11/13/android-native-apps |title=Native C application for Android |date=13 November 2007|work=Benno's blog|first=Ben |last=Leslie |accessdate=2009-09-04| archiveurl= http://web.archive.org/web/20090913233211/http://benno.id.au/blog/2007/11/13/android-native-apps| archivedate= 13 September 2009 | deadurl= no[/tpl] The ADB debugger gives a root shell under the Android Emulator which allows native ARM code or x86 code to be uploaded and executed. ARM or x86 code can be compiled using GCC on a standard PC. Running native code is complicated by the fact that Android uses a non-standard C library (libc, known as Bionic). The underlying graphics device is available as a framebuffer at /dev/graphics/fb0.[tpl]cite mailing list |url=http://groups.google.com/group/android-developers/msg/ace258af92fff692?dmode=source&pli=1 |title=Native C *GRAPHICAL* applications now working on Android emulator |last=Cooksey |first=Tom |mailinglist=android-developers |date=2007-11-07 |accessdate=2008-12-13| archiveurl= http://web.archive.org/web/20081216121944/http://groups.google.com/group/android-developers/msg/ace258af92fff692?dmode=source&pli=1| archivedate= 16 December 2008 | deadurl= no[/tpl] The graphics library that Android uses to arbitrate and control access to this device is called the Skia Graphics Library (SGL), and it has been released under an open source licence.[tpl]cite web|url=http://src.chromium.org/viewvc/chrome/trunk/src/skia/|title=Skia source[/tpl] Skia has backends for both win32 and Unix, allowing the development of cross-platform applications, and it is the graphics engine underlying the Google Chrome web browser.[tpl]cite web |url=http://www.atoker.com/blog/2008/09/06/skia-graphics-library-in-chrome-first-impressions/ |title=Skia graphics library in Chrome: First impressions |last=Toker |first=Alp |date=2008-09-06 |accessdate=2008-12-13| archiveurl= http://web.archive.org/web/20081216114802/http://www.atoker.com/blog/2008/09/06/skia-graphics-library-in-chrome-first-impressions/| archivedate= 16 December 2008 | deadurl= no[/tpl]
Unlike Java App development based on the Eclipse IDE, the NDK is based on command-line tools and requires invoking them manually to build, deploy and debug the apps. Several third-party tools allow integrating the NDK into Eclipse[tpl]cite web|url=http://mhandroid.wordpress.com/2011/01/23/using-eclipse-for-android-cc-development/|title=Using Eclipse for Android C/C++ Development[/tpl] and Visual Studio[tpl]cite web|url=http://visualgdb.com/tutorials/android/|title=Tutorial: Android Native Development with Visual Studio[/tpl].

===Android Open Accessory Development Kit===

The Android 3.1 platform (also backported to Android 2.3.4) introduces Android Open Accessory support, which allows external USB hardware (an Android USB accessory) to interact with an Android-powered device in a special "accessory" mode. When an Android-powered device is in accessory mode, the connected accessory acts as the USB host (powers the bus and enumerates devices) and the Android-powered device acts as the USB device. Android USB accessories are specifically designed to attach to Android-powered devices and adhere to a simple protocol (Android accessory protocol) that allows them to detect Android-powered devices that support accessory mode.http://developer.android.com/guide/topics/usb/adk.html

===App Inventor for Android===

On 12 July 2010 Google announced the availability of App Inventor for Android, a Web-based visual development environment for novice programmers, based on MIT's Open Blocks Java library and providing access to Android devices' GPS, accelerometer and orientation data, phone functions, text messaging, speech-to-text conversion, contact data, persistent storage, and Web services, initially including Amazon and Twitter.[tpl]cite news |last=Claburn |first=Thomas |title=Google App Inventor Simplifies Android Programming |url=http://www.informationweek.com/news/smb/mobile/showArticle.jhtml?articleID=225702880&subSection=News |accessdate=2010-07-12 |newspaper=Information Week |date=2010-07-12| archiveurl= http://web.archive.org/web/20100715053302/http://www.informationweek.com/news/smb/mobile/showArticle.jhtml?articleID=225702880&subSection=News| archivedate= 15 July 2010 | deadurl= no[/tpl] "We could only have done this because Android’s architecture is so open," said the project director, MIT's Hal Abelson.[tpl]cite news |last=Lohr |first=Steve |title=Google’s Do-It-Yourself App Creation Software |url=http://www.nytimes.com/2010/07/12/technology/12google.html?src=busln |accessdate=2010-07-12 |newspaper=New York Times |date=2010-07-11| archiveurl= http://web.archive.org/web/20100713205741/http://www.nytimes.com/2010/07/12/technology/12google.html?src%3Dbusln| archivedate= 13 July 2010 | deadurl= no[/tpl] Under development for over a year,[tpl]cite news |last=Abelson |first=Hal |title=App Inventor for Android|url=http://googleresearch.blogspot.com/2009/07/app-inventor-for-android.html |accessdate=2010-07-12 |newspaper=Google Research Blog |date=2009-07-31| archiveurl= http://web.archive.org/web/20100807225847/http://googleresearch.blogspot.com/2009/07/app-inventor-for-android.html| archivedate= 7 August 2010 | deadurl= no[/tpl] the block-editing tool has been taught to non-majors in computer science at Harvard, MIT, Wellesley, Trinity College (Hartford,) and the University of San Francisco, where Professor David Wolber developed an introductory computer science course and tutorial book for non-computer science students based on App Inventor for Android.[tpl]cite news |last=Kim|first=Ryan |title=Google brings app-making to the masses |url=http://articles.sfgate.com/2009-12-11/business/17220628_1_computer-science-smart-phone-android |accessdate=2010-07-12 |newspaper=San Francisco Chronicle |date=2009-12-11| archiveurl= http://web.archive.org/web/20100717133322/http://articles.sfgate.com/2009-12-11/business/17220628_1_computer-science-smart-phone-android| archivedate= 17 July 2010 | deadurl= no[/tpl][tpl]cite web |last=Wolber |first=David |title=AppInventor.org |url=http://www.appinventor.org/ |accessdate=2010-07-12| archiveurl= http://web.archive.org/web/20100715053515/http://www.appinventor.org/| archivedate= 15 July 2010 | deadurl= no[/tpl]

===HyperNext Android Creator===

HyperNext Android Creator (HAC) is a software development system aimed at beginner programmers that can help them create their own Android apps without knowing Java and the Android SDK. It is based on HyperCard that treated software as a stack of cards with only one card being visible at any one time and so is well suited to mobile phone applications that have only one window visible at a time. HyperNext Android Creator's main programming language is simply called HyperNext and is loosely based on Hypercard's HyperTalk language. HyperNext is an interpreted English-like language and has many features that allow creation of Android applications. It supports a growing subset of the Android SDK including its own versions of the GUI control types and automatically runs its own background service so apps can continue to run and process information while in the background.

===The Simple project===

The goal of Simple is to bring an easy-to-learn-and-use language to the Android platform.[tpl]cite web |url = http://code.google.com/p/simple/ |title = Android Simple[/tpl] Simple is a BASIC dialect for developing Android applications. It targets professional and non-professional programmers alike in that it allows programmers to quickly write Android applications that use the Android runtime components.
Similar to Microsoft Visual Basic 6, Simple programs are form definitions (which contain components) and code (which contains the program logic). The interaction between the components and the program logic happens through events triggered by the components. The program logic consists of event handlers which contain code reacting to the events.
The Simple project is not very active[tpl]cite web |url = http://code.google.com/p/simple/source/list |title = Source Code Changes List[/tpl], the last source code update being in August 2009.

===Basic4android===

Basic4android is a commercial product similar to Simple.[tpl]cite web |url = http://www.basic4ppc.com |title = Basic4android[/tpl] It is inspired by Microsoft Visual Basic 6 and Microsoft Visual Studio. Basic4android is very active, and there is a strong online community of Basic4android developers.

==Android Developer Challenge==

The Android Developer Challenge was a competition for the most innovative application for Android. Google offered prizes totaling 10 million US dollars, distributed between ADC I and ADC II. ADC I accepted submissions from 2 January to 14 April 2008. The 50 most promising entries, announced on 12 May 2008, each received a $25,000 award to further development.[tpl]cite web |url = http://android-developers.blogspot.com/2008/05/top-50-applications.html |work = Android Developers Blog |title = The Top 50 Applications |first = Jason |last = Chen |date = 12 May 2008 |accessdate = 2009-09-04| archiveurl= http://web.archive.org/web/20090925051155/http://android-developers.blogspot.com/2008/05/top-50-applications.html| archivedate= 25 September 2009 | deadurl= no[/tpl][tpl]cite news |url = http://www.linuxdevices.com/news/NS3168326017.html |title = Android Developer Challenge announces first-round winners |work = Linux for Devices |first = Eric |last = Brown |date = 13 May 2008[/tpl] It ended in early September with the announcement of ten teams that received $275,000 each, and ten teams that received $100,000 each.[tpl]cite web |url=http://code.google.com/android/adc/adc_gallery/ |title=ADC I Top 50 Gallery |accessdate=2009-05-19 |work=Android Developer Challenge[/tpl] ADC II was announced on 27 May 2009.[tpl]cite web |url=http://code.google.com/android/adc/ |title=Android Developer Challenge |accessdate=2008-01-11 |work=Google Code[/tpl] The first round of the ADC II closed on 6 October 2009.[tpl]cite web |url = http://android-developers.blogspot.com/2009/10/adc-2-round-1-scoring-complete.html |title = ADC 2 Round 1 Scoring Complete |work = Android Developers Blog |first = Eric |last = Chu |date = 6 October 2009 |accessdate =2009-11-03| archiveurl= http://web.archive.org/web/20091101174228/http://android-developers.blogspot.com/2009/10/adc-2-round-1-scoring-complete.html| archivedate= 1 November 2009 | deadurl= no[/tpl] The first-round winners of ADC II comprising the top 200 applications were announced on 5 November 2009. Voting for the second round also opened on the same day and ended on November 25. Google announced the top winners of ADC II on November 30, with SweetDreams, What the Doodle!? and WaveSecure being nominated the overall winners of the challenge.[tpl]cite web |url = http://code.google.com/android/adc/gallery_winners.html |title = ADC 2 Overall Winners |work = Android Developer Challenge |publisher = Google |accessdate =2010-12-05| archiveurl= http://web.archive.org/web/20110104052927/http://code.google.com/android/adc/gallery_winners.html| archivedate= 4 January 2011 | deadurl= no[/tpl][tpl]cite web |url = http://www.businessweek.com/the_thread/techbeat/archives/2009/11/android_develop_2.html |title = Android Developer Challenge 2 Winners Announced |work = BusinessWeek |first = Olga |last = Kharif |date = 30 November 2009 |accessdate =2010-12-05[/tpl]

==Community-based firmware==

There is a community of open-source enthusiasts that build and share Android-based firmware with a number of customizations and additional features, such as FLAC lossless audio support and the ability to store downloaded applications on the microSD card.[tpl]cite web |url=http://forum.xda-developers.com/forumdisplay.php?f=448 |work=xda-developers forum |title=Dream android development |accessdate=2009-09-11[/tpl] This usually involves rooting the device. Rooting allows users root access to the operating system, enabling full control of the phone. In order to use custom firmwares the device's bootloader must be unlocked. Rooting alone does not allow the flashing of custom firmware. Modified firmwares allow users of older phones to use applications available only on newer releases.[tpl]cite web |url=http://voltmobileandtech.com/blog/ |title= Android 2.1 from Motorola Droid Ported to G1 |work=Volt Mobile |date= March 10, 2010[/tpl]
Those firmware packages are updated frequently, incorporate elements of Android functionality that haven't yet been officially released within a carrier-sanctioned firmware, and tend to have fewer limitations. CyanogenMod and OMFGB are examples of such firmware.
On 24 September 2009, Google issued a cease and desist letter[tpl]cite web |url = http://androidandme.com/2009/09/hacks/cyanogenmod-in-trouble/ |title = CyanogenMod in trouble? |work = Android and me |first = Taylor |last = Wimberly |date = 24 September 2009 |accessdate = 2009-09-26| archiveurl= http://web.archive.org/web/20091003165002/http://androidandme.com/2009/09/hacks/cyanogenmod-in-trouble/| archivedate= 3 October 2009 | deadurl= no[/tpl] to the modder Cyanogen, citing issues with the re-distribution of Google's closed-source applications[tpl]cite web |url = http://android-developers.blogspot.com/2009/09/note-on-google-apps-for-android.html |title = A Note on Google Apps for Android |work = Android Developers Blog |first = Dan |last = Morrill |date = 25 September 2009 |accessdate =2009-09-26| archiveurl= http://web.archive.org/web/20091025130628/http://android-developers.blogspot.com/2009/09/note-on-google-apps-for-android.html| archivedate= 25 October 2009 | deadurl= no[/tpl] within the custom firmware. Even though most of  Android OS is open source, phones come packaged with closed-source Google applications for functionality such as the Android Market and GPS navigation. Google has asserted that these applications can only be provided through approved distribution channels by licensed distributors. Cyanogen has complied with Google's wishes and is continuing to distribute this mod without the proprietary software. He has provided a method to back up licensed Google applications during the mod's install process and restore them when it is complete.[tpl]cite web |url = http://www.cyanogenmod.com/home/the-current-state |title = The current state... |work = CyanogenMod Android Rom |first = Cyanogen |date = 27 September 2009 |accessdate =2009-09-27| archiveurl= http://web.archive.org/web/20091103155814/http://www.cyanogenmod.com/home/the-current-state| archivedate= 3 November 2009 | deadurl= no[/tpl]

==Java standards==

Obstacles to development include the fact that Android does not use established Java standards, i.e. Java SE and ME. This prevents compatibility among Java applications written for those platforms and those for the Android platform. Android only reuses the Java language syntax and semantics, but does not provide the full class libraries and APIs bundled with Java SE or ME. However, there are multiple tools in the market from companies such as Myriad Group and UpOnTek that provide J2ME to Android conversion services.

==History==

Android is created by the Open Handset Alliance which is led by Google.Android Development Tutorial  The early feedback on developing applications for the Android platform was mixed.[tpl]cite web |url=http://arstechnica.com/news.ars/post/20071219-google-android-plagued-by-dysfunctional-development-process.html |title=Developing apps for Google Android: it's a mixed bag |accessdate=2007-12-19 |last=Paul |first=Ryan |date=2007-12-19 |work=Ars Technica| archiveurl= http://web.archive.org/web/20071220052053/http://arstechnica.com/news.ars/post/20071219-google-android-plagued-by-dysfunctional-development-process.html| archivedate= 20 December 2007 | deadurl= no[/tpl] Issues cited include bugs, lack of documentation, inadequate QA infrastructure, and no public issue-tracking system. (Google announced an issue tracker on 18 January 2008.)[tpl]cite web |url=http://android-developers.blogspot.com/2008/01/you-cant-rush-perfection-but-now-you.html |title=You can't rush perfection, but now you can file bugs against it |work=Android Developers Blog |first=Dan |last=Morrill |date=18 January 2008 |accessdate=2009-09-03[/tpl] In December 2007, MergeLab mobile startup founder Adam MacBeth stated, "Functionality is not there, is poorly documented or just doesn't work... It's clearly not ready for prime time."[tpl]cite web |url=http://online.wsj.com/article_email/SB119800856883537515-lMyQjAxMDE3OTE4ODAxMDg4Wj.html |title=Glitches Bug Google's Android Software |accessdate=2007-12-19 |last=Morrison |first=Scott |date=2007-12-19 |work=The Wall Street Journal |publisher= [/tpl] Despite this, Android-targeted applications began to appear the week after the platform was announced. The first publicly available application was the Snake game.[tpl]cite web |url=http://www.android-freeware.org/download/snake |title=Snake |accessdate=2008-01-26 |work=Android Freeware Directory[/tpl][tpl]cite web |url=http://www.mobiles2day.com/2007/11/14/first-android-application-snake/ |title=First Android Application — Snake |accessdate=2008-01-07 |date=2007-11-14 |work=Mobiles2day |publisher= [/tpl]
The Android Dev Phone is a SIM-unlocked and hardware-unlocked device that is designed for advanced developers. While developers can use regular consumer devices purchased at retail to test and use their applications, some developers may choose not to use a retail device, preferring an unlocked or no-contract device.
A preview release of the Android SDK was released on 12 November 2007. On 15 July 2008, the Android Developer Challenge Team accidentally sent an email to all entrants in the Android Developer Challenge announcing that a new release of the SDK was available in a "private" download area. The email was intended for winners of the first round of the Android Developer Challenge. The revelation that Google was supplying new SDK releases to some developers and not others (and keeping this arrangement private) led to widely reported frustration within the Android developer community at the time.[tpl]cite web |url=http://www.theregister.co.uk/2008/07/14/android_developer_unrest/ |title=Google plays Hide and Seek with Android SDK |first=Cade |last=Metz |date=14 July 2008 |accessdate=2008-10-23 |work=The Register| archiveurl= http://web.archive.org/web/20081006032345/http://www.theregister.co.uk/2008/07/14/android_developer_unrest/| archivedate= 6 October 2008 | deadurl= no[/tpl]
On 18 August 2008 the Android 0.9 SDK beta was released. This release provided an updated and extended API, improved development tools and an updated design for the home screen. Detailed instructions for upgrading are available to those already working with an earlier release.[tpl]cite web |url=http://code.google.com/android/intro/upgrading.html |title=Android — An Open Handset Alliance Project: Upgrading the SDK |accessdate=2008-10-24| archiveurl= http://web.archive.org/web/20080913131056/http://code.google.com/android/intro/upgrading.html| archivedate= 13 September 2008 | deadurl= no[/tpl][tpl]Dead link|date=September 2009[/tpl] On 23 September 2008 the Android 1.0 SDK (Release 1) was released.[tpl]cite web |url=http://developer.android.com/sdk/older_releases.html |title=Other SDK Releases |accessdate=2009-09-02 |work=Android Developers[/tpl] According to the release notes, it included "mainly bug fixes, although some smaller features were added." It also included several API changes from the 0.9 version. Multiple versions have been released since.[tpl]cite web |url=http://developer.android.com/sdk/older_releases.html |title=SDK Archives[/tpl]

==See also==

* List of open source Android applications

== References ==

==Bibliography==

* 

* 

* 

* 

* 

* 

== External links ==

* Android Developers
* Android Training
* Android Developers Blog
** Android training courses
* Google Projects for Android from Google Code
* Diagram of Android internals
* Hypertext map of Android API classes

