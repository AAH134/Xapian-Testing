
Extensible Messaging and Presence Protocol (XMPP) is an open-standard communications protocol for message-oriented middleware based on XML (Extensible Markup Language).[tpl]Cite journal | contribution-url = http://www.gnomis.org/presentasjoner/oslo2005/xmpp.pdf | contribution = XMPP as MOM | title = Greater NOrdic MIddleware Symposium (GNOMIS) | first = Leif | last = Johansson | publisher = University of Stockholm | date = April 18, 2005 | place = Oslo | postscript =  [/tpl] The protocol was originally named Jabber,Jabber Inc. and was developed by the Jabber open-source community in 1999 for near-real-time, extensible instant messaging (IM), presence information, and contact list maintenance. Designed to be extensible, the protocol has also been used for publish-subscribe systems; signalling for VoIP, video, and file transfer; gaming; Internet of things applications such as the smart grid; and social networking services.
Unlike most instant messaging protocols, XMPP uses an open systems approach of development and application, by which anyone may implement an XMPP service and interoperate with other organizations' implementations.  Because XMPP is an open protocol, implementations can be developed using any software license; although many server, client, and library implementations are distributed as free and open source software, numerous freeware and commercial software implementations also exist.
The Internet Engineering Task Force (IETF) formed an XMPP Working Group in 2002 to formalize the core protocols as an IETF instant messaging and presence technology. The XMPP WG produced four specifications (RFC 3920, RFC 3921, RFC 3922, RFC 3923), which were approved by the Internet Engineering Steering Group as Proposed Standards in 2004. In 2011, RFC 3920 and RFC 3921 were superseded by RFC 6120 and RFC 6121 respectively, with RFC 6122 specifying the XMPP address format. In addition to these core protocols standardized at the IETF, the XMPP Standards Foundation (formerly the Jabber Software Foundation) is active in developing open XMPP extensions.
XMPP-based software is deployed widely across the Internet, and by 2003, was used by over ten million people worldwide, according to the XMPP Standards Foundation.[tpl]cite press release | url = http://xmpp.org/xsf/press/2003-09-22.shtml | title = Jabber Instant Messaging User Base Surpasses ICQ | publisher = XMPP Standards Foundation | date = September 22, 2003 | accessdate =November 30, 2007 [/tpl]

== History ==

Jeremie Miller began working on the Jabber technology in 1998 and released the first version of the jabberd server on January 4, 1999.Open Real Time Messaging System The early Jabber community focused on open-source software, mainly the jabberd server (e.g., version 1.0 in May 2000, version 1.2 in October 2000, and version 1.4 in February 2001), but its major outcome proved to be the development of the XMPP protocol.
The early Jabber protocol, as developed in 1999 and 2000, formed the basis for XMPP as published in RFC 3920 and RFC 3921 (the primary changes during formalization by the IETF's XMPP Working Group were the addition of TLS for channel encryption and SASL for authentication). Note that RFC 3920 and RFC 3921 have been superseded by RFC 6120 and RFC 6121, published in 2011.
The first IM service based on XMPP was Jabber.org, which has operated continuously since 1999 and has offered free accounts to users of XMPP.Chatting Up the Chef Linux Journal March 1, 2003 by Marcel Gagné From 1999 until February 2006, the service used jabberd as its server software, at which time it migrated to ejabberd (both of which are free software application servers). In January 2010, the service migrated to the proprietary M-Link server software produced by Isode Ltd.
In August 2005, Google introduced Google Talk, a combination VoIP and IM system that uses XMPP for instant messaging and as a base for a voice and file transfer signaling protocol called Jingle.  (The initial launch did not include server-to-server communications; Google enabled that feature on January 17, 2006). Google has since added video functionality to Google Talk, also using the Jingle protocol for signaling.
In January 2008, AOL introduced experimental Extensible Messaging and Presence Protocol (XMPP) support for its AOL Instant Messenger (AIM) service,[tpl]cite web|url=http://florianjensen.com/2008/01/17/aol-adopting-xmpp-aka-jabber/|title=AOL adopting XMPP aka Jabber|date=2008-01-17|accessdate=2008-01-17|author=Florian Jensen| archiveurl= http://web.archive.org/web/20080120143857/http://florianjensen.com/2008/01/17/aol-adopting-xmpp-aka-jabber/| archivedate= 20 January 2008 | deadurl= no[/tpl] allowing AIM users to communicate using the standardized, open-source XMPP. However, in March 2008, this service was discontinued.[tpl]Citation needed|date=December 2010[/tpl] As of May 2011, AOL offers limited XMPP support.[tpl]cite web|url=http://www.aim.com/xmpp|title=AOL XMPP Gateway|date=2011-05-14|accessdate=2011-05-14| archiveurl= http://web.archive.org/web/20110522092331/http://www.aim.com/xmpp| archivedate= 22 May 2011 | deadurl= no[/tpl]
In September 2008, Cisco Systems acquired Jabber, Inc., the creators of the commercial product Jabber XCP.
In February 2010, the social-networking site Facebook opened up its chat feature to third-party applications via XMPP.  The Facebook developers' site notes that Facebook Chat does not actually run an XMPP server internally, but merely presents an XMPP interface to clients; consequently, some server-side features like roster editing cannot be done via XMPP.[tpl]cite web|url=http://developers.facebook.com/docs/chat/|title=Facebook Chat API|accessdate=November 29, 2011[/tpl] Similarly, in December 2011, Microsoft released an XMPP interface to its .NET Messenger Service.http://windowsteamblog.com/windows_live/b/windowslive/archive/2011/12/14/anyone-can-build-a-windows-live-messenger-client-with-open-standards-access-via-xmpp.aspx Skype also provides limited XMPP support. http://gigaom.com/2011/06/28/skype-xmpp-support/ However, it is important to understand that these are not native XMPP implementations.

== Strengths ==

;Decentralization
: The architecture of the XMPP network is similar to email; anyone can run their own XMPP server and there is no central master server.
;Open standards
: The Internet Engineering Task Force has formalized XMPP as an approved instant messaging and presence technology under the name of XMPP (the latest specifications are RFC 6120 and RFC 6121). No royalties are required to implement support of these specifications and their development is not tied to a single vendor.
;History
: XMPP technologies have been in use since 1999. Multiple implementations of the XMPP standards exist for clients, servers, components, and code libraries.
;Security
: XMPP servers can be isolated from the public XMPP network (e.g., on a company intranet), and strong security (via SASL and TLS) has been built into the core XMPP specifications.
;Flexibility
: Custom functionality can be built on top of XMPP; to maintain interoperability, common extensions are managed by the XMPP Software Foundation. XMPP applications beyond IM include groupchat, network management, content syndication, collaboration tools, file sharing, gaming, remote systems control and monitoring, geolocation, middleware and cloud computing, VoIP and Identity services.

== Weaknesses ==

;In-band binary data transfer is inefficient
: Because XMPP is not yet encoded as Efficient XML Interchange but as a long-lived XML stream, binary data must be first base64 encoded before it can be transmitted in-band. Therefore any significant amount of binary data (e.g., file transfers) is best transmitted out-of-band, using in-band messages to coordinate. The best example of this is the Jingle XMPP Extension Protocol, XEP-0166.

== Decentralization and addressing ==

The XMPP network uses a client–server architecture (clients do not talk directly to one another).  However, it is decentralized—by design, there is no central authoritative server, as there is with services such as AOL Instant Messenger or Windows Live Messenger. Some confusion often arises on this point as there is a public XMPP server being run at jabber.org, to which a large number of users subscribe.  However, anyone may run their own XMPP server on their own domain. 
Every user on the network has a unique Jabber ID (usually abbreviated as JID). To avoid requiring a central server to maintain a list of IDs, the JID is structured like an e-mail address with a username and a domain name (or IP addressRFC-Standard 6122 for XMPP) for the server where that user resides, separated by an at sign (@), such as username@example.com.
Since a user may wish to log in from multiple locations, they may specify a resource.  A resource identifies a particular client belonging to the user (for example home, work, or mobile). This may be included in the JID by appending a slash followed by the name of the resource. For example, the full JID of a user's mobile account would be username@example.com/mobile.
Each resource may have specified a numerical value called priority.  Messages simply sent to username@example.com will go to the client with highest priority, but those sent to username@example.com/mobile will go only to the mobile client.  The highest priority is the one with largest numerical value.
JIDs without a username part are also valid, and may be used for system messages and control of special features on the server.  A resource remains optional for these JIDs as well.

== XMPP via HTTP and WebSocket transports ==

The original and "native" transport protocol for XMPP is Transmission Control Protocol (TCP), using open-ended XML streams over long-lived TCP connections.
As an alternative to the TCP transport, the XMPP community has also developed an HTTP transport for web clients as well as users behind restricted firewalls. In the original specification, XMPP could use HTTP in two ways: pollingXEP-0025: Jabber HTTP Polling and binding.XEP-0124: Bidirectional-streams Over Synchronous HTTP (BOSH) The polling method, now deprecated, essentially implies messages stored on a server-side database are being fetched (and posted) regularly by an XMPP client by way of HTTP 'GET' and 'POST' requests. With BOSH, the client uses HTTP long polling to receive messages as soon as they are sent.  This push model of notification is more efficient than polling, where many of the polls return no new data.
Because the client uses HTTP, most firewalls allow clients to fetch and post messages without any hindrances. Thus, in scenarios where the TCP port used by XMPP is blocked, a server can listen on the normal HTTP port and the traffic should pass without problems.  Various websites let people sign in to XMPP via a browser. Furthermore, there are open public servers that listen on standard http (port 80) and https (port 443) ports, and hence allow connections from behind most firewalls.  However, the IANA-registered port for BOSH is actually 5280, not 80.
A perhaps more efficient transport for real-time messaging is WebSocket, a web technology providing for bi-directional, full-duplex communications channels over a single TCP connection. Experimental implementations of XMPP over WebSocket exist, and a (now-expired) Internet-Draft documenting this approach was published at the IETF but not yet standardized.

== Implementations ==

XMPP is implemented by a large number of clients, servers, and code libraries. These implementations are provided under a variety of software licenses.

== Deployments ==

Several large public IM services natively use XMPP, including Google Talk, and LiveJournal's "LJ Talk"Question FAQ #270, Nimbuzz, and Ovi (Nokia). Various hosting services, such as DreamHost, enable hosting customers to choose XMPP services alongside more traditional web and email services. Specialized XMPP hosting services also exist so that domain owners need not directly run their own XMPP servers, including WebEx Connect, Chrome.pl, Flosoft.biz, i-pobox.net, and hosted.im.
XMPP is also used in deployments of non-IM services, including smart grid systems such as demand-response applications, message-oriented middleware, and as a replacement for SMS to provide text messaging on many smartphone clients.

== Extensions ==

The XMPP Standards Foundation or XSF (formerly the Jabber Software Foundation) is active in developing open XMPP extensions. However, extensions can also be defined by any individual, software project, or organization. For example, Google has defined a number of non-XSF extensions, which are used in Google Talk and Google+ (e.g., for signalling related to Google Hangouts). Another example is the federation protocol in Apache Wave, which is based on XMPP.[tpl]cite web|url=http://www.waveprotocol.org/draft-protocol-specs/draft-protocol-spec#intro-overview|title=Google Wave Federation Protocol|publisher=Google[/tpl]

== Competing Standards ==

XMPP has often been regarded as a competitor to SIMPLE, based on the Session Initiation Protocol (SIP) protocol, as the standard protocol for instant messaging and presence notification."XMPP rises to face SIMPLE standard", Infoworld magazine, April 17, 2003 XMPP rises to face SIMPLE standard"XMPP vs SIMPLE: The race for messaging standards", Infoworld magazine, May 23, 2003 Infoworld.com
The XMPP extension for multi-user chat XEP-0045: Multi-User Chat can be seen as a competitor to Internet Relay Chat (IRC), although it is not as widely used as IRC.
Similarly, the XMPP extensions for publish-subscribe XEP-0060: Publish-Subscribe provide many of the same features as the Advanced Message Queuing Protocol.

== Connecting to other protocols ==

One of the original design goals of the early Jabber open-source community was enabling users to connect to multiple instant messaging systems (especially non-XMPP systems) through a single client application. This was done though entities called transports or  gateways to other instant messaging protocols, but also to protocols such as SMS or Email.  Unlike multi-protocol clients, XMPP provides this access at the server level by communicating via special gateway services running alongside an XMPP server.  Any user can "register" with one of these gateways by providing the information needed to log on to that network, and can then communicate with users of that network as though they were XMPP users. Thus, such gateways function as client proxies (the gateway authenticates on the user's behalf on the non-XMPP service). As a result, any client that fully supports XMPP can access any network with a gateway without extra code in the client, and without the need for the client to have direct access to the Internet. However, the client proxy model may violate terms of service on the protocol used (although such terms of service are not legally enforceable in several countries) and also requires the user to send their IM username and password to the third-party site that operates the transport (which may raise privacy and security concerns).
Another type of gateway is a server-to-server gateway, which enables a non-XMPP server deployment to connect to native XMPP servers using the built in interdomain federation features of XMPP. Such server-to-server gateways are offered by several enterprise IM software products, including:
* IBM Lotus Sametime"Lotus Sametime 7.5 Interoperates with AIM, Google Talk", eWeek, December 6, 2006 Eweek.com"Lotus ships gateway to integrate IM with AOL, Yahoo, Google", Network World, December 6, 2006 Networkworld.com
* Microsoft Lync Server (formerly named Microsoft Office Communications Server – OCS)"Unified Communications: Uniting Communication Across Different Networks", Microsoft Press Release, October 1, 2009 Microsoft.com

== Development ==

The IETF XMPP working group has produced a number of RFC protocol documents: RFC 3920 (superseded by RFC 6120), RFC 3921 (superseded by RFC 6121), RFC 3922, RFC 3923, RFC 4622, RFC 4854, RFC 4979, and RFC 6122. The most important and most widely implemented of these specifications are:
* RFC 6120, Extensible Messaging and Presence Protocol (XMPP): Core, which describes client–server messaging using two open-ended XML streams. XML streams consist of <presence/>, <message/> and <iq/> (info/query). A connection is authenticated with Simple Authentication and Security Layer (SASL) and encrypted with Transport Layer Security (TLS).
* RFC 6121, Extensible Messaging and Presence Protocol (XMPP): Instant Messaging and Presence describes instant messaging (IM), the most common application of XMPP.
* RFC 6122, Extensible Messaging and Presence Protocol (XMPP): Address Format describes the rules for XMPP addresses, also called JabberIDs or JIDs. Currently JIDs use Stringprep (as defined in RFC 3454) for handling of Unicode characters outside the ASCII range, but this will be changed in the future to use the technology produced by the IETF's PRECIS Working Group.
The XMPP Standards Foundation (XSF) develops and publishes extensions to XMPP through a standards process centered on XMPP Extension Protocols (XEPs, previously known as Jabber Enhancement Proposals - JEPs). The following extensions are in especially wide use:
* Data FormsXEP-0004: Data Forms
* Service DiscoveryXEP-0030: Service Discovery
* Multi-User ChatXEP-0045: Multi-User Chat
* Publish-Subscribe XEP-0060: Publish-Subscribe and Personal Eventing ProtocolXEP-0163: Personal Eventing Protocol
* XHTML-IMXEP-0071: XHTML-IM
* File TransferXEP-0096: File Transfer
* Entity CapabilitiesXEP-0115: Entity Capabilities
* HTTP Binding
* Jingle for voice and video

== See also ==

* Comparison of instant messaging clients
* Comparison of instant messaging protocols
* Comparison of XMPP server software
* Secure communication
* SIMPLE

== References ==

== External links ==

* XMPP Standards Foundation
* Jabber User Guide – End user introduction to XMPP (archive)
* IETF Publishes XMPP RFCs
* XMPP Case Studies
* Podcast: FLOSS 49: XMPP Peter Saint-Andre interviewed by Randal Schwartz and Leo Laporte

