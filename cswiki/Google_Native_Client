
Google Native Client (NaCl) is a sandboxing technology for running a subset of Intel x86 or ARM native code using software-based fault isolation.Efficient software-based fault isolation, Robert Wahbe, Steven Lucco, Thomas E. Anderson, Susan L. Graham, 1993 It is proposed for safely running native code from a web browser, allowing web-based applications to run at near-native speeds,[tpl]cite web|last=Marchak |first=Mike |url=http://google-code-updates.blogspot.com/2008/12/native-client-technology-for-running.html |title=Native Client: A Technology for Running Native Code on the Web |publisher=Google-code-updates.blogspot.com |date=8 December 2008 |accessdate=25 April 2012[/tpl] which aligns well with Google's plans with Chrome OS. It may also be used for securing browser plugins, and in the future parts of other applications or full applications.[tpl]cite web |url=http://www.theregister.co.uk/2011/09/12/google_native_client_from_all_sides/ |title= Google Native Client: The web of the future – or the past?|author= Cade Metz|date=12 September 2011|publisher=The Register|accessdate=17 September 2011 [/tpl]
To demonstrate the readiness of the technology, on 9 December 2011, Google announced the availability of several new Chrome-only versions of games known for their rich and processor-intensive graphics, including Bastion. NaCl runs hardware-accelerated 3D graphics (via OpenGL ES 2.0), sandboxed local file storage, dynamic loading, full screen mode, and mouse capture. There are also plans to make NaCl available on handheld devices.[tpl]cite web |url=http://download.cnet.com/8301-2007_4-57340015-12/native-client-turns-chrome-into-high-end-gaming-platform/ |title= Native Client turns Chrome into high-end gaming platform| author= Seth Rosenblatt|date=9 December 2011|publisher=CNET|accessdate=9 December 2011[/tpl][tpl]cite web|url=http://googlecode.blogspot.com/2011/12/games-apps-and-runtimes-come-to-native.html |title=Google Code Blog: Games, apps and runtimes come to Native Client |publisher=Googlecode.blogspot.com |date=9 December 2011 |accessdate=25 April 2012[/tpl]

==Overview==

Native Client is an open-source project being developed by Google.[tpl]cite web|url=http://code.google.com/p/nativeclient/ |title=Google Native Client on Google Code |publisher=Google |accessdate=25 April 2012[/tpl] To date, Quake, XaoS and MAME have been ported to Google Native Client Platform. Native Client was formerly available as an experimental disabled-by-default feature in the Google Chrome web browser. The feature is enabled from version 14 of Chrome; at the same time, native applications can be uploaded to the Chrome Web Store, and with more recent Chrome versions (if enabled in chrome://flags), native client applications can run under Chrome from any web site.[tpl]cite web|url=http://blog.chromium.org/2011/08/native-client-brings-sandboxed-native.html |title=The Chromium Blog: Native Client Brings Sandboxed Native Code to Chrome Web Store Apps |publisher=Blog.chromium.org |date=18 August 2011 |accessdate=25 April 2012[/tpl] When Portable Native Client (PNaCl) is released, Chrome will enable Native Client (by default) for all pages and web apps, including those distributed outside the Chrome Web Store.[tpl]cite web|url=https://developers.google.com/native-client/devguide/distributing |title=Distributing Your Application |publisher=developers.google.com[/tpl]
An ARM implementation was released in March 2010.[tpl]cite web|url=http://www.h-online.com/open/news/item/Google-s-Native-Client-goes-ARM-and-beyond-957478.html|title=Google's Native Client goes ARM and beyond|publisher=The H|date=18 March 2010|accessdate=19 May 2010[/tpl] x86-64 and IA-32 are also supported. [tpl]as of|2011|March[/tpl], however, all three implementations could only use code compiled to the host's native instruction set. PNaCl (Portable Native Client, pronounced: pinnacle) is being developed to address this issue. To run an application portably under PNaCl, it must be compiled to an architecture-agnostic version of the LLVM intermediate representation bytecode.[tpl]cite web|url=http://nativeclient.googlecode.com/svn/data/site/pnacl.pdf |title=PNaCl: Portable Native Client Executables |format=PDF |accessdate=25 April 2012[/tpl]
NaCl uses Software Fault Isolation for sandboxing on x86-64 and ARM.[tpl]cite web|url=http://research.google.com/pubs/pub35649.html|title=Adapting Software Fault Isolation to Contemporary CPU Architectures|author= David Sehr, Robert Muth, Cliff L. Biffle, Victor Khimenko, Egor Pasko, Bennet Yee, Karl Schimpf, Brad Chen|year=2010|publisher= 19th USENIX Security Symposium|accessdate=31 July 2011[/tpl] The x86-32 implementation of Native Client is notable for its novel sandboxing method which makes use of the x86 architecture's rarely-used segmentation facility.[tpl]cite web|url=http://research.google.com/pubs/pub34913.html|title=Native Client: A Sandbox for Portable, Untrusted x86 Native Code|accessdate=31 July 2011|author=Bennet Yee, David Sehr, Greg Dardyk, Brad Chen, Robert Muth, Tavis Ormandy, Shiki Okasaka, Neha Narula, Nicholas Fullagar|publisher= IEEE Symposium on Security and Privacy (Oakland'09)|year=2009[/tpl] Native Client sets up x86 segments to restrict the memory range that the sandboxed code can access.  It uses a code verifier to prevent use of unsafe instructions such as those that perform system calls.  To prevent the code from jumping to an unsafe instruction hidden in the middle of a safe instruction, Native Client requires that all indirect jumps be jumps to the start of 32-byte-aligned blocks, and instructions are not allowed to straddle these blocks.  Because of these constraints, C code must be recompiled to run under Native Client, which provides customised versions of the GNU toolchain, specifically gcc and binutils.
Native Client is licensed under a BSD-style license.
Native Client uses Newlib as its C library, but a port of GNU libc is also available.[tpl]cite web|url=http://plash.beasts.org/wiki/NativeClient |title=NativeClient: Plash Wiki |publisher=Plash.beasts.org |date=2 October 2009 |accessdate=25 April 2012[/tpl]
Since release 0.5, Native Client has a stable ABI.Official NaCl Release Notes This roughly means that code compiled and running in the NaCl implementation of Google Chrome 14, will work in all future versions of Google Chrome.

==Pepper==

NaCl denotes table salt; as a pun, the name of pepper was also used. Pepper API is a cross-platform, open-source API for creating Native Client modules.Native Client: Technical Overview Pepper Plugin API, or PPAPI[tpl]cite web|url=http://code.google.com/p/ppapi/ |title=Pepper Plugin API project at |publisher=Google |accessdate=25 April 2012[/tpl][tpl]cite web|url=http://src.chromium.org/viewvc/chrome/trunk/src/ppapi/ |title=Chrome Source: Index of /trunk/src/ppapi |publisher=Src.chromium.org |accessdate=25 April 2012[/tpl] is a cross-platform API for Native Client-secured web browser plugins, first based on Netscape's NPAPI, then rewritten from scratch. It is currently an experimental feature of Chromium and Google Chrome (there is a Chrome experiment in chrome://flags to enable the PPAPI version of Flash), though the built-in PDF viewer already uses it.[tpl]cite web|last=Metz |first=Cade |url=http://www.theregister.co.uk/2010/06/18/chrome_dev_builds_get_built_in_pdf_reader/ |title=Google hugs Adobe harder with Chrome-PDF merge |publisher=The Register |date=18 June 2010 |accessdate=25 April 2012[/tpl]

===PPAPI===

On 12 August 2009 a page on Google Code introduced a new project, Pepper with associated Pepper Plugin API (PPAPI),[tpl]cite web|url=http://www.chromium.org/nativeclient/getting-started/getting-started-background-and-basics#TOC-Pepper-Plugin-API-PPAPI- |title=Getting Started: Background and Basics – The Chromium Projects |publisher=Chromium.org |accessdate=25 April 2012[/tpl] "a set of modifications to NPAPI to make plugins more portable and more secure".[tpl]cite web|author=Comment by t.hajdu....@gmail.com |url=http://code.google.com/p/ppapi/wiki/Concepts |title=Pepper.wiki |publisher=Google |date=24 February 2012 |accessdate=25 April 2012[/tpl] This extension is designed specifically to ease the implementation of out-of-process plugin execution. Further, the goals of the project are to provide a framework for making plugins fully cross-platform. Topics considered include:
* Uniform semantics for NPAPI across browsers.
* Execution in a separate process from the renderer/browser itself.
* Standardize rendering using the browser's compositing process.
* Defining standardized events, and 2D rasterization functions.
* Initial attempt at providing 3D graphics access.
* Plugin registry.
The continuously evolving Pepper API also supports Gamepads (version 19) and WebSockets (version 18).Native Client: News & Announcements
As of 13 May 2010, Google's open source browser, Chromium, was the only web browser to utilize the new browser plug-in model.[tpl]cite web|last=Metz |first=Cade |url=http://www.theregister.co.uk/2010/05/13/google_native_client_sdk/ |title=Google heats up native code for Chrome OS |publisher=Theregister.co.uk |date=13 May 2010 |accessdate=25 April 2012[/tpl] Mozilla has announced that they are "not interested in or working on Pepper at this time."[tpl]cite web|url=https://wiki.mozilla.org/NPAPI:Pepper |title=NPAPI:Pepper – MozillaWiki |publisher=Wiki.mozilla.org |date=26 May 2011 |accessdate=25 April 2012[/tpl]

==Reception==

Some groups of browser developers support the Native Client technology, but others do not.
Supporters: Chad Austin (of IMVU) praised the way Native Client can bring high-performance applications to the web (with about 5% penalty compared to native code) in a secure way, while also accelerating the evolution of client-side applications by giving a choice of the programming language used (beside JavaScript).[tpl]cite web|last=Austin |first=Chad |url=http://chadaustin.me/2011/01/in-defense-of-language-democracy/ |title=Chad Austin: In Defense of Language Democracy (Or: Why the Browser Needs a Virtual Machine) |publisher=Chadaustin.me |date=8 January 2011 |accessdate=25 April 2012[/tpl] 
Detractors: Other IT professionals are more critical of this sandboxing technology as it has substantial or substantive interoperability issues. 
Mozilla's vice president of products, Jay Sullivan, said that Mozilla has no intention of running native code inside the browser, as "These native apps are just little black boxes in a webpage. ... We really believe in HTML, and this is where we want to focus."[tpl]cite web|last=Metz |first=Cade |url=http://www.theregister.co.uk/2010/06/24/jay_sullivan_on_firefox/ |title=Mozilla: Our browser will not run native code |publisher=The Register |date=24 June 2010 |accessdate=25 April 2012[/tpl]
Mozilla's Christopher Blizzard criticized NaCl, claiming that native code cannot evolve in the same way that the source code-driven Internet can. He also compared NaCl to Microsoft's ActiveX technology, plagued with DLL hell.
Håkon Wium Lie, Opera's CTO, believes that "NaCl seems to be 'yearning for the bad old days, before the web'", and that "Native Client is about building a new platform – or porting an old platform into the web ... it will bring in complexity and security issues, and it will take away focus from the web platform."

==References==

==External links==

* Native Client - Google Developers (Native Client Developer Site)
* Google Native Client Project Page
* [tpl]Youtube|id=2xV_0pTpNj0|title=Google I/O 2009 Native Code for Compute Intensive Web Apps[/tpl] – Technical talk at Google I/O 2009
* NaClbox
* News4Geeks.net: Google Native Client: The web of the future – or the past? (a good overview)

===Examples===

* Native Client Gallery
* torapp.info, vector editor, especially powerful for security printing
* NACLBox, a port of DOSBox to Native Client
* SodaSynth, a synthesizer for Native Client

