
There are two statements named Linus's Law: one by Eric S. Raymond concerning  software bug detection by a community, and the other by Linus Torvalds about the motivations of programmers.

== By Eric Raymond ==

Linus's Law as described by Raymond is a claim about software development, named in honor of Linus Torvalds and formulated by Raymond in his essay and book "The Cathedral and the Bazaar" (1999).[tpl]cite web |title=The Cathedral and the Bazaar |first=Eric S. |last=Raymond |authorlink=Eric S. Raymond |year= | work=catb.org |url=http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s04.html[/tpl][tpl]cite book |title=The Cathedral and the Bazaar |first=Eric S. |last=Raymond |year=1999 |page=30 | publisher=O'Reilly Media |isbn=1-56592-724-9 |url=http://books.google.com/books?id=F6qgFtLwpJgC&pg=PA30#v=onepage&f=false[/tpl] The law states that "given enough eyeballs, all bugs are shallow"; or more formally: "Given a large enough beta-tester and co-developer base, almost every problem will be characterized quickly and the fix will be obvious to someone." Presenting the code to multiple developers with the purpose of reaching consensus about its acceptance is a simple form of software reviewing. Researchers and practitioners have repeatedly shown the effectiveness of the reviewing process in finding bugs and security issues,[tpl]cite book| first=Charles P. |last=Pfleeger|first2= Shari Lawrence |last2=Pfleeger|title=Security in Computing, 4th Ed. |isbn=0-13-239077-9 |pages=154–157 |publisher=Prentice Hall PTR |year=2003 |page= |url=http://books.google.com/books?id=O3VB-zspJo4C&pg=PA154#v=onepage&f=false[/tpl] and also that reviews may be more efficient than testing.
In Facts and Fallacies about Software Engineering, Robert Glass refers to Linus' Law as a "mantra" of the Open source movement, but calls it a fallacy, stating that research has found that the number of bugs found decreases with too many inspectors, and that no research supports  the Law as stated.[tpl]cite book |last=Glass |first=Robert L. |title=Facts and Fallacies of Software Engineering |isbn=0-321-11742-5 |year=2003 |publisher=Addison-Wesley |page=174 |url=http://books.google.com/books?id=3Ntz-UJzZN0C&pg=PA174#v=onepage&f=false[/tpl]  While closed-source practitioners also promote stringent, independent code analysis during a software project's development, they focus on in-depth review by a few and not primarily the number of "eyeballs".[tpl]cite book|last=Howard |first=Michael |last2=LeBlanc |first2=David |title=Writing Secure Code, 2nd. Ed. |pages=44–45, 615 |isbn=0-7356-1722-8 |publisher=Microsoft Press |year=2003 |url=http://books.google.com/books?ei=1jAVTYK1CI7EsAPilv3GAg&ct=result&id=Uafp7m2wPcMC&dq=Writing+Secure+Code&q=review#search_anchor[/tpl]Howard, Leblanc. p 726.

== By Linus Torvalds ==

In the prologue of the book The Hacker Ethic and the Spirit of the Information Age (2001) Torvalds introduces his "Linus's Law", which is that every motivation that makes a man do something can be classified under "survival", "social life" and "entertainment."[tpl]cite book |author=Himanen, Pekka; Torvalds, Linus; Castells, Manual|year=2001 | page=xiv |url=http://books.google.com/books?id=4SeIQZjpzCwC&pg=PT10#v=onepage&q&f=false |title=The Hacker Ethic |publisher=Random House |isbn=0-375-50566-0[/tpl]  As a result, he writes, progress is defined as reaching a higher category: not doing a thing merely for survival, but for social reasons, and then, even better, just for fun.

== See also ==

*List of eponymous laws
*Collaborative software development model
*Crowdsourcing
*Software peer review
*Wisdom of the crowd
*Maslow's hierarchy of needs

== References ==


