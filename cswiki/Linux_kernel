
The Linux kernel is the operating system kernel used by the Linux family of Unix-like operating systems.
The Linux kernel is released under the GNU General Public License version 2 (GPLv2)COPYING (plus some firmware images with various non-free licenses), and is developed by contributors worldwide. Day-to-day development discussions take place on the Linux kernel mailing list.
The Linux kernel was initially conceived and created by Finnish computer science student Linus Torvalds in 1991. Many Linux distributions have been released based upon the Linux kernel.

==History==

In April 1991, Linus Torvalds, a 21-year-old student at the University of Helsinki, Finland started working on some simple ideas for an operating system. He started with a task switcher in Intel 80386 assembly language and a terminal driver. On 25 August 1991, Torvalds posted the following to comp.os.minix, a newsgroup on Usenet:

After that, many people contributed code to the project. Early on, the MINIX community contributed code and ideas to the Linux kernel. At the time, the GNU Project had created many of the components required for a free operating system, but its own kernel, GNU Hurd, was incomplete and unavailable. The BSD operating system had not yet freed itself from legal encumbrances. Despite the limited functionality of the early versions, Linux rapidly accumulated developers and users.
By September 1991, Linux version 0.01 was released on the FTP server (ftp.funet.fi) of the Finnish University and Research Network (FUNET). It had 10,239 lines of code. In October 1991, Linux version 0.02 was released.
In December 1991, Linux 0.11 was released. This version was the first to be self-hosted - Linux 0.11 could be compiled by a computer running Linux 0.11. When he released version 0.12 in February 1992, Torvalds adopted the GNU General Public License (GPL) over his previous self-drafted license, which had not permitted commercial redistribution.
A newsgroup known as alt.os.linux was started, and on 19 January 1992, the first post to alt.os.linux was made.
The X Window System was soon ported to Linux.  In March 1992, Linux version 0.95 was the first to be capable of running X. This large version number jump (from 0.1x to 0.9x) was due to a feeling that a version 1.0 with no major missing pieces was imminent.  However, this proved to be somewhat overoptimistic, and from 1993 to early 1994, 15 development versions of version 0.99 appeared.
On 14 March 1994, Linux 1.0.0 was released, with 176,250 lines of code. In March 1995, Linux 1.2.0 was released (310,950 lines of code).
Version 2 of Linux, released on 9 June 1996, was followed by additional major versions under the version 2 header:
* 25 January 1999 - Linux 2.2.0 was released (1,800,847 lines of code).
* 18 December 1999 - IBM mainframe patches for 2.2.13 were published, allowing Linux to be used on enterprise-class machines.
* 4 January 2001 - Linux 2.4.0 was released (3,377,902 lines of code).
* 17 December 2003 - Linux 2.6.0 was released (5,929,913 lines of code).
Starting in 2004, the release process changed and new kernels started coming out on a regular schedule every 2-3 months, numbered 2.6.0, 2.6.1, up through 2.6.39.
On 21 July 2011 Linus Torvalds announced the release of Linux 3.0: "Gone are the 2.6. days".Linux 3.0 release, Linus Torvalds,  Linux Kernel Mailing List, Thu, 21 Jul 2011 19:59:53 -0700 The version bump  is not about major technological changes when compared to Linux 2.6.39;"Linux Kernel Data." it marks the kernel's 20th anniversary.Linux 3.0 Released; Linus Torvalds Explains Why You Shouldn't Care by Mark Hachman, July 22, 2011 01:35pm EST, PC Magazine The time-based release process remained the same.
As of 2012, the Linux 3.2 release had 14,998,651 lines of code.

==Legal aspects==

===Licensing terms===

Initially, Torvalds released Linux under a license which forbade any commercial use. This was changed in version 0.12 to the GNU General Public License (GPL). This license allows distribution and sale of possibly modified and unmodified versions of Linux but requires that all those copies be released under the same license and be accompanied by the complete corresponding source code.
Torvalds has described licensing Linux under the GPL as the "best thing I ever did."

==== GPL version 3 ====

Currently, Linux is licensed only under version 2 of the GPL, without offering the licensee the option to choose "any later version" (unlike much other GPL software In September 2006, a survey of 29 key kernel programmers indicated 28 preferred GPLv2 to the then-current GPLv3 draft. Torvalds commented, "I think a number of outsiders... believed that I personally was just the odd man out, because I've been so publicly not a huge fan of the GPLv3."

===Loadable kernel modules and firmware===

It is debated whether loadable kernel modules (LKMs) should be considered derivative works under copyright law, and thereby fall under the terms of the GPL. Torvalds has stated his belief that LKMs using only a limited, "public" subset of the kernel interfaces can sometimes be non-derived works, thus allowing some binary-only drivers and other LKMs that are not licensed under the GPL. Not all Linux contributors agree with this interpretation, however, and even Torvalds agrees that many LKMs are clearly derived works, and indeed he writes that "kernel modules ARE derivative 'by default'". On the other hand Torvalds has also said that "one gray area in particular is something like a driver that was originally written for another operating system (i.e. clearly not a derived work of Linux in origin). ... THAT is a gray area, and _that_ is the area where I personally believe that some modules may be considered to not be derived works simply because they weren't designed for Linux and don't depend on any special Linux behaviour." Proprietary graphics drivers, in particular, are heavily discussed. Ultimately, it is likely that such questions can only be resolved by a court.
One point of licensing controversy is Linux's use of firmware "binary blobs" to support some hardware devices. These files are under a variety of licenses, many of them restrictive and their exact underlying source code is usually unknown. Richard Stallman claims that these blobs make Linux partially non-free software, and that distributing Linux may even be violating the GPL (which requires "complete corresponding source code" to be available). In response, the FSFLA started a project, Linux-libre, to create a completely free kernel without proprietary objects, which is used by some completely free distributions, such as  those endorsed by the Free Software Foundation. On December 15, 2010 the Debian Project announced that the next Debian stable version would come with a kernel "stripped of all non-free firmware bits".Debian 6.0 "Squeeze" to be released with completely free Linux Kernel

===Trademark===

Linux is a registered trademark of Linus Torvalds in the United States and some other countries. This is the result of an incident in which William Della Croce, Jr., who was not involved in the Linux project, trademarked the name and subsequently demanded royalties for its use. Several Linux backers retained legal counsel and filed suit against Della Croce. The issue was settled in August 1997 when the trademark was assigned to Linus Torvalds.Action Taken on Linux Trademark, Mar 01, 1997 by Phil Hughes, Linux JournalThe Trademark History of Linux, the Operating System by Tonya Gisselberg, 2010

===SCO litigation===

In March 2003, the SCO Group (SCO) filed a lawsuit against IBM claiming that IBM had violated copyrights that SCO claimed to hold over the Unix source code, by contributing portions of that code to Linux. Additionally, SCO sent letters to a number of companies warning that their use of Linux without a license from SCO may be a violation of copyright law, and claimed in the press that they would be suing individual Linux users. IBM then promised to defend its Linux customers on their behalf. This controversy has generated lawsuits by SCO against Novell, DaimlerChrysler (partially dismissed in July, 2004), and AutoZone, and retaliatory lawsuits by Red Hat and others against SCO.
In early 2007 SCO filed the specific details of the purported copyright infringement.  Despite previous claims that SCO was the rightful owner of 1 million lines of code, they specified 326 lines of code, most of which were uncopyrightable. Groklaw article
In August 2007, the court in the Novell case ruled that SCO did not actually own the Unix copyrights to begin with, The jury case was decided on 30 March 2010 in Novell's favour.

===Hyper-V submission by Microsoft===

In July 2009 Microsoft submitted Hyper-V drivers to the kernel, which improve the performance of virtual Linux guest systems in a Windows hosted environment. Microsoft was forced to submit the code when it was discovered that Microsoft had incorporated a Hyper-V network driver with GPL-licensed components statically linked to closed-source binaries.
By 2011 Microsoft had become the 17th largest contributor to the Linux kernel.

==Technical features==

Linux supports true preemptive multitasking (both in user mode and kernel mode), virtual memory, shared libraries, demand loading, shared copy-on-write executables, memory management, the Internet protocol suite, and threading.

===Architecture===

Linux is a monolithic kernel. Device drivers and kernel extensions run in kernel space (ring 0 in many CPU architectures), with full access to the hardware, although some exceptions run in user space, for example filesystems based on FUSE. The graphics system most people use with Linux doesn't run in the kernel, in contrast to that found in Microsoft Windows.

====Tanenbaum–Torvalds debate====

The fact that Linux is a monolithic kernel rather than a microkernel was the topic of the Tanenbaum–Torvalds debate between Andrew S. Tanenbaum, the creator of Minix, and Linus Torvalds.

====Preemption====

The Linux kernel provides  preemptive scheduling  under certain conditions. Until kernel version 2.4, only processes were preemptive, i.e. in addition to time quantum expiration, an execution of current process in user mode would be interrupted if higher dynamic priority processes entered TASK_RUNNING state.Chapter 10, Understanding the Linux Kernel, By Daniel P. Bovet & Marco Cesati, October 2000 Towards Linux 2.6, an ability to interrupt a task executing kernel code was added, although with that not all sections of the kernel code can be preempted. Towards Linux 2.6, A look into the workings of the next new kernel, Anand Santhanam, IBM Global Services, 23 Sep 2003 The Linux kernel contains different scheduler classes. By default the kernel uses a scheduler mechanism called the Completely Fair Scheduler introduced in the 2.6.23 version of the kernel.[ref]
</ref> Internally this default-scheduler class is also known as ''SCHED_OTHER'', but the kernel also contains two real-time scheduling classes named ''SCHED_FIFO'' (realtime [[FIFO|first-in-first-out]]) and ''SCHED_RR'' (realtime [[round-robin]]) both of which takes precedence over the default class.<ref name="moshe" /> Through the use of the real-time Linux patch (PREEMPT_RT), support for full preemption of critical sections, interrupt handlers and "interrupt disable" code sequences can be supported.<ref name="Paul McKenney"> [http://lwn.net/Articles/146861/], A realtime preemption overview, Paul McKenney, [[LWN.net]], </ref>  Partial mainline integration of real-time Linux already brings some functionality to Linux mainline.<ref>

[/ref]  Preemption improves latency, increases responsiveness, and makes Linux more suitable for desktop and real-time applications. Older versions of the kernel had a so-called giant lock for synchronization across the entire kernel. This was finally removed by Arnd Bergmann in 2011.git.kernel.org: BKL: that's all folks

====Portability====

While not originally designed to be portable, Linux is now one of the most widely ported operating system kernels,  running on a diverse range of systems from the ARM architecture to the IBM Z/Architecture (a massive mainframe server that can run hundreds to thousands of concurrent Linux instances). Linux runs as the main operating system on IBM's Blue Gene supercomputers. 

====Kernel panic====

In Linux, a "panic" is an unrecoverable system error detected by the kernel, as opposed to similar errors detected by user space code. It is possible for kernel code to indicate such a condition by calling the panic function located in the header file sys/system.h. However, most panics are the result of unhandled processor exceptions in kernel code, such as references to invalid memory addresses. These are typically indicative of a bug somewhere in the call chain leading to the panic.  They can also indicate a failure of hardware, such as a failed RAM cell or errors in arithmetic functions in the processor caused by a processor bug, overheating/damaged processor, or a soft error.

=====Kernel oops=====

A report of a bug in the kernel is called an "OOPS".

===Programming languages===

Linux is written in the version of the C programming language supported by GCC (which has introduced a number of extensions and changes to standard C), together with a number of short sections of code written in the assembly language (in GCC's "AT&T-style" syntax) of the target architecture. Because of the extensions to C it supports, GCC was for a long time the only compiler capable of correctly building Linux. In 2004, Intel claimed to have modified the kernel so that its C compiler also was capable of compiling it.

===Estimated cost to redevelop===

The cost to redevelop the Linux kernel version 2.6.0 in a traditional proprietary development setting has been estimated to be $612 million USD (€467 million euro, £394 million GBP) in 2004 prices using the COCOMO man-month estimation model. In 2006, a study funded by the European Union put the redevelopment cost of kernel version 2.6.8 higher, at €882 million euro ($1.14 billion USD, £744 million GBP).Economic impact of FLOSS on innovation and competitiveness of the EU ICT sector, Table 3 on page 50.
This topic was revisited in October 2008 by Amanda McPherson, Brian Proffitt and Ron Hale-Evans. Using David A. Wheeler's methodology, they estimated redevelopment of the 2.6.25 kernel now costs $1.3 billion (part of a total $10.8 billion to redevelop Fedora 9).Estimating Total Development Cost Of a Linux Distribution, Table on page 6. Again, Garcia-Garcia and Alonso de Magdaleno from University of Oviedo (Spain) estimate that the value annually added to kernel was about 100 million EUR between 2005 and 2007 and 225 million EUR in 2008, it would cost also more than one billion EUR (about 1.4 billion USD) to develop in the European Union.
As of January 4, 2011, using current LOC (lines of code) and wage numbers with David A. Wheeler's calculations it would cost approximately 3 billion USD (about 2.2 billion EUR) to redevelop the Linux kernel.

===Feature history===

Version 1.0 of the Linux kernel was released on 14 March 1994.Kernel 1.0 Source Code Release (last checked 2008-10-27)  This release of the Linux kernel only supported single-processor i386-based computer systems.  Portability became a concern, and so version 1.2 (released 7 March 1995)Kernel 1.2 Source Code Release (last checked 2008-10-27) gained support for computer systems using processors based on the Alpha, SPARC, and MIPS architectures.
Version 2.0 was released 9 June 1996.Kernel 2.0.x Source Code Releases (last checked 2008-10-27)  There were 41 releases in the series.  The major feature of 2.0 was SMP support (that is, support for multiple processors in a single system) and support for more types of processors.
Version 2.2 (released 26 January 1999)Kernel 2.2.x Source Code Releases (last checked 2008-10-27 removed the global spinlock and provided improved SMP support, and added support for the m68k and PowerPC architectures as well as new file systems (including read-only support for Microsoft’s NTFS).The Wonderful World of Linux 2.2 (last checked 2008-10-27)
Version 2.4.0, released on 4 January 2001,Kernel 2.4.x Source Code Releases (last checked 2008-10-27) contained support for ISA Plug and Play, USB, and PC Cards.The Wonderful World of Linux 2.4 (last checked 2008-10-27)  It also included support for the PA-RISC processor from Hewlett-Packard. Development for 2.4.x changed a bit in that more features were made available throughout the duration of the series, including: support for Bluetooth, Logical Volume Manager (LVM) version 1, RAID support, InterMezzo and ext3 file systems.
Version 2.6.0 was released on 18 December 2003.Kernel 2.6.x.y Source Code Releases (last checked 2008-10-27) The development for 2.6.x changed further towards including new features throughout the duration of the series. Among the changes that have been made in the 2.6 series are:  integration of µClinux into the mainline kernel sources, PAE support, support for several new lines of CPUs, integration of ALSA into the mainline kernel sources, support for up to 232 users (up from 216), support for up to 229 process IDs (up from 215), substantially increased the number of device types and the number of devices of each type, improved 64-bit support, support for file systems of up to 16 terabytes, in-kernel preemption, support for the Native POSIX Thread Library (NPTL), User-mode Linux integration into the mainline kernel sources, SELinux integration into the mainline kernel sources, InfiniBand support, and considerably more.  Also notable are the addition of several file systems throughout the 2.6.x releases: FUSE, JFS, XFS, ext4 and more.  Details on the history of the 2.6 kernel series can be found in the ChangeLog files on the 2.6 kernel series source code release area of kernel.org.
Version 3.0 was released on 22 July 2011.  Torvalds announced that the big change was, "NOTHING. Absolutely nothing."Linux 3.0-rc1, Linus Torvalds, 30 May 2011, accessed 31 May 2011 30 May 2011 saw Torvalds announce, "...let's
make sure we really make the next release not just an all new shiny number, but a good kernel too." After the expected 6–7 week development process, it would be released near the 20th anniversary of Linux.

===Security===

Computer security is a much-publicized topic in relation to the Linux kernel, because a large number of bugs in the kernel can be potential security flaws, whether they allow privilege escalation or create denial-of-service attack vectors. Over the years, numerous such flaws were found and fixed in the Linux kernel.
Critics have accused kernel developers of covering up security flaws or at least not announcing them. In response Linus Torvalds in 2008 replied, "I personally consider security bugs to be just 'normal bugs'. I don't cover them up, but I also don't have any reason what-so-ever to think it's a good idea to track them and announce them as something special...one reason I refuse to bother with the whole security circus is that I think it glorifies—and thus encourages—the wrong behavior. It makes 'heroes' out of security people, as if the people who don't just fix normal bugs aren't as important. In fact, all the boring normal bugs are way more important, just because there's a lot more of them. I don't think some spectacular security hole should be glorified or cared about as being any more 'special' than a random spectacular crash due to bad locking."
For example, the vmsplice() local root exploit was a short-lived vulnerability in the Linux kernel that allowed a user with shell access to mount a privilege escalation attack to gain root privileges against a system running versions of 2.6.17 or later of the kernel. This was fixed in kernel version 2.6.24.2.

==Development==

===Timeline===

Source: kernel.org
===Development model===

The current development model of the Linux kernel is such that Linus Torvalds makes the releases of new versions, also called the "vanilla" or "mainline" kernels, meaning that they contain the main, generic branch of development. This branch is officially released as a new version approximately every three months, after Torvalds does an initial round of integrating major changes made by all other programmers, and several rounds of bug-fix pre-releases.
In the current scheme, the main branch of development is not a traditional "stable" branch, instead it incorporates all kinds of changes, both the latest features as well as security and bug fixes. For users who do not want to risk updating to new versions containing code that may not be well tested, a separate set of "stable" branches exist, one for each released version, which are meant for people who just want the security and bug fixes, but not a whole new version. These branches are maintained by the stable team (Greg Kroah-Hartman, Chris Wright, maybe others).
Most Linux users use a kernel supplied by their Linux distribution. Some distributions ship the "vanilla" and/or "stable" kernels. However, several Linux distribution vendors (such as Red Hat and Debian) maintain another set of Linux kernel branches which are integrated into their products. These are by and large updated at a slower pace compared to the "vanilla" branch, and they usually include all fixes from the relevant "stable" branch, but at the same time they can also add support for drivers or features which had not been released in the "vanilla" version the distribution vendor started basing their branch from.
The development model for Linux 2.6 was a significant change from the development model for Linux 2.5. Previously there was a stable branch (2.4) where only relatively minor and safe changes were merged, and an unstable branch (2.5), where bigger changes and cleanups were allowed. Both of these branches had been maintained by the same set of people, led by Torvalds. This meant that users would always have a well-tested 2.4 version with the latest security and bug fixes to use, though they would have to wait for the features which went into the 2.5 branch. The downside of this was that the "stable" kernel ended up so far behind that it no longer supported recent hardware and lacked needed features.  In the late 2.5.x series kernel some maintainers elected to try and back port their changes to the stable series kernel which resulted in bugs being introduced into the 2.4.x series kernel. The 2.5 branch was then eventually declared stable and renamed to 2.6.  But instead of opening an unstable 2.7 branch, the kernel developers decided to continue putting major changes into the 2.6 branch, which would then be released at a pace faster than 2.4.x but slower than 2.5.x. This had the desirable effect of making new features more quickly available and getting more testing of the new code, which was added in smaller batches and easier to test.
As a response to the lack of a stable kernel tree where people could coordinate the collection of bug fixes as such, in December 2005 Adrian Bunk announced that he would keep releasing 2.6.16.y kernels when the stable team moved on to 2.6.17. they continue to maintain that version and release bug fixes for it, in addition to others.
After the change of the development model with 2.6.x, developers continued to want what one might call an unstable kernel tree, one that changes as rapidly as new patches come in. Andrew Morton decided to repurpose his -mm tree from memory management to serve as the destination for all new and experimental code. In September 2007 Morton decided to stop maintaining this tree.2.6.23-rc6-mm1, "This Just Isn't Working Any More", from KernelTrap In February 2008, Stephen Rothwell created the linux-next tree to serve as a place where patches aimed to be merged during the next development cycle are gathered. Several subsystem maintainers also adopted the suffix -next for trees containing code which is meant to be submitted for inclusion in the next release cycle.

===Maintenance===

While Linus Torvalds supervises code changes and releases to the latest kernel versions, he has delegated the maintenance of older versions to other programmers.See the Linux MAINTAINERS file. Major releases as old as 2.0 (officially made obsolete with the kernel 2.2.0 release in January 1999) are maintained as needed, although at a very slow pace.

===Revision control===

The Linux kernel source code used to be maintained without the help of an automated source code management system, mostly because of Linus Torvalds' dislike of centralized SCM systems.
In 2002, Linux kernel development switched to BitKeeper, an SCM system which satisfied Linus Torvalds' technical requirements. BitKeeper was made available to Linus and several others free of charge, but was not free software, which was a source of controversy. The system did provide some interoperability with free SCM systems such as CVS and Subversion.
In April 2005, however, efforts to reverse-engineer the BitKeeper system by Andrew Tridgell led BitMover, the company which maintained BitKeeper, to stop supporting the Linux development community. In response, Linus Torvalds and others wrote a new source code control system for the purpose, called Git. The new system was written within weeks, and in two months the first official kernel release was made using git. Git soon developed into a separate project in its own right and gained wider adoption in the free software community.

===Version numbering===

The Linux kernel has had three different numbering schemes.
The first scheme was used in the run-up to "1.0".  The first version of the kernel was 0.01. This was followed by 0.02, 0.03, 0.10, 0.11, 0.12 (the first GPL version), 0.95, 0.96, 0.97, 0.98, 0.99 and then 1.0.Linux Kernel Archives - Volume 1 (Riley Williams) From 0.95 on there were many patch releases between versions.
After the 1.0 release and prior to version 2.6, the number was composed as "A.B.C", where the number A denoted the kernel version, the number B denoted the major revision of the kernel, and the number C indicated the minor revision of the kernel. The version was changed only when major changes in the code and the concept of the kernel occurred, twice in the history of the kernel: in 1994 (version 1.0) and in 1996 (version 2.0). Version 3.0 was released in 2011, but it was not a major change in kernel concept. The major revision was assigned according to the traditional even-odd system version numbering system. The minor revision had been changed whenever security patches, bug fixes, new features or drivers were implemented in the kernel.
In 2004, after version 2.6.0 was released, the kernel developers held several discussions regarding the release and version scheme and ultimately Linus Torvalds and others decided that a much shorter "time-based" release cycle would be beneficial. For about seven years, the first two numbers remained "2.6", and the third number was incremented with each new release, which rolled out after two to three months.  A fourth number was sometimes added to account for bug and security fixes (only) to the kernel version.  The even-odd system of alternation between stable and unstable was gone.
The first use of the fourth number occurred when a grave error, which required immediate fixing, was encountered in 2.6.8's NFS code. However, there were not enough other changes to legitimize the release of a new minor revision (which would have been 2.6.9). So, 2.6.8.1 was released, with the only change being the fix of that error. With 2.6.11, this was adopted as the new official versioning policy. Later it became customary to continuously back-port major bug-fixes and security patches to released kernels and indicate that by updating the fourth number.
On 29 May 2011, Linus Torvalds announced that the kernel version would be bumped to 3.0 for the release following 2.6.39, in honor of the 20th anniversary of Linux.  It continued the time-based release practice introduced with 2.6.0, but using the second number...i.e. 3.1 would follow 3.0 after a few months.  An additional number (now the third number) would be added on when necessary to designate security and bug fixes, as for example with 3.0.18.
Regular development pre-releases are titled release candidates, which is indicated by appending the suffix 'rc' to the kernel version, followed by an ordinal number.
Also, sometimes the version will have a suffix such as 'tip', indicating another development branch, usually (but not always) the initials of a person who made it. For example, 'ck' stands for Con Kolivas, 'ac' stands for Alan Cox, etc. Sometimes, the letters are related to the primary development area of the branch the kernel is built from, for example, 'wl' indicates a wireless networking test build. Also, distributors may have their own suffixes with different numbering systems and for back-ports to their "enterprise" (i.e. stable but older) distribution versions.

==See also==

* Comparison of operating system kernels
* Git (software)
* Kernel.org
* Ksplice
* Linux architecture
* menuconfig, an ncurses-based target for the Linux kernel Makefile
* Modprobe
* System.map
* SystemTap
* User space

==References==

*  (audio tape, abridged ed., read by David Diamond) - on the beginnings of the Linux kernel
* Nikolai Bezroukov, Portraits of Open Source Pioneers. Ch 4: A benevolent dictator (Softpanorama e-book).
* 
* FreeBSD/Linux kernel source code cross-reference.  Browsable Linux (and other operating system) kernel source cross-reference.
* LXR: The Linux Cross-Reference project.  Browsable Linux kernel source.
* KernelHQ - a browsable kernel source tree - with all versions present, and with browsable diffs
* The LWN 2001 Linux Timeline
* Everyone's Favorite Linux Mascot
* Linux Timeline
* History of Linux
* Upgrade to 2.6 kernel
* The Wonderful World of Linux 2.6; Joseph Pranevich; December 2003
* Understanding the Linux 2.6.8.1 CPU Scheduler; Josh Aas, 17 February 2005
* LinuxChanges
* Seminar Paper on Linux Kernel 2.6
* Linux Device Drivers, 3rd Edition
* Understanding the Linux Kernel, 3rd Edition (Book)
* Linux: The GPL And Binary Modules
* Anatomy of the Linux kernel

==External links==

* 
* Linux Kernel documentation index
* Linux Kernel man pages
* Kernel Newbies Site - Excellent source of information for people new to kernel
* Linus' kernel tree for 2.6
* Kernel bugzilla - Regressions for each of recent versions
* Linux-libre project - Maintains and distributes fully free kernel
* LinGrok, Linux Kernel Source Code Cross-reference
* Greg Kroah Hartman on the Linux Kernel at youtube

