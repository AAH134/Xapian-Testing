
In computer science, run-time algorithm specialization is a methodology for creating efficient algorithms for costly computation tasks of certain kinds. The methodology originates in the field of automated theorem proving and, more specifically, in the Vampire theorem prover project.
The idea is inspired by the use of partial evaluation in optimising program translation. 
Many core operations in theorem provers exhibit the following pattern.

== Difference from partial evaluation ==

==Specialization with compilation==

The specialized algorithm has to be represented in a form that can be interpreted.
Then the code itself can be additionally optimized by answer-preserving transformations that rely only on the semantics of instructions of the abstract machine. 
Instructions of the abstract machine can usually be represented as records. One field of such a record stores an integer tag that identifies the instruction type, other fields may be used for storing additional Parameters of the instruction, for example a pointer to another
instruction representing a label, if the semantics of the instruction requires a jump. All instructions of a code can be stored in an array, or list, or tree. 
Interpretation is done by fetching instructions in some order, identifying their type
and executing the actions associated with this type. 
In C or C++ we can use a switch statement to associate 
some actions with different instruction tags. 
by taking values for instruction tags from a small interval of integers.

==Data-and-algorithm specialization==

In such circumstances, full-scale specialization with compilation may not be suitable due to excessive memory usage.  

== See also ==

* Psyco, a specializing run-time compiler for Python
* multi-stage programming

==References==

* A. Voronkov, "The Anatomy of Vampire: Implementing Bottom-Up Procedures with Code Trees", Journal of Automated Reasoning, 15(2), 1995 (original idea)

==Further reading==

* A. Riazanov and A. Voronkov, "Efficient Checking of Term Ordering Constraints", Proc. IJCAR 2004, Lecture Notes in Artificial Intelligence 3097, 2004 (compact but self-contained illustration of the method)
* A. Riazanov and A. Voronkov, Efficient Instance Retrieval with Standard and Relational Path Indexing, Information and Computation, 199(1-2), 2005 (contains another illustration of the method)
* A. Riazanov, "Implementing an Efficient Theorem Prover", PhD thesis, The University of Manchester, 2003 (contains the most comprehensive description of the method and many examples)

